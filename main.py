import asyncio
import os
from flask import Flask
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime

BOT_TOKEN = os.getenv("BOT_TOKEN")
REQUEST_TRIGGER = "#–ó–ê–Ø–í–ö–ê"

# --- –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ ---
MANAGER_CONTACTS = {
    "default": "+375290000000",  # –û–±—â–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    "georgia": "+375291234567",
    "abkhazia": "+375292345678",
    "gelendzhik": "+375293456789",
    "dagestan": "+375294567890",
    "piter": "+375295678901",
    "teriberka": "+375296789012",
    "belarus": "+375297890123",
    "avia": "+375298888888",  # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –∞–≤–∏–∞ —Ç—É—Ä–∞–º
}

# --- –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã ---
BUS_TOURS = {
    "georgia": {
        "name": "–ì—Ä—É–∑–∏—è",
        "desc": "–ì—Ä—É–∑–∏—è ‚Äî –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å –≥–æ—Ä–∞–º–∏, –º–æ—Ä–µ–º –∏ –≤–∏–Ω–æ–º.",
        "url": "https://example.com/georgia"
    },
    "abkhazia": {
        "name": "–ê–±—Ö–∞–∑–∏—è",
        "desc": "<b>–ê–±—Ö–∞–∑–∏—è: –î–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞!</b> 1Ô∏è‚É£ <b>–ê–í–¢–û–ë–£–°–ù–´–ô</b> ... 2Ô∏è‚É£ <b>–ñ–î</b> ...",
        "url": "https://zefirtravel.by/avtobusnie-tury-iz-minska-s-otdyhom-na-more/?set_filter=y&arFilterTours_262_1198337567=Y"
    },
    "gelendzhik": {
        "name": "–ì–µ–ª–µ–Ω–¥–∂–∏–∫",
        "desc": "<b>–¢—É—Ä –≤ –ì–µ–ª–µ–Ω–¥–∂–∏–∫</b> <b>–î–∞—Ç—ã:</b> ...",
        "url": "https://zefirtravel.by/avtobusnie-tury-iz-minska-s-otdyhom-na-more/?set_filter=y&arFilterTours_262_2671772459=Y"
    },
    "dagestan": {
        "name": "–î–∞–≥–µ—Å—Ç–∞–Ω",
        "desc": "<b>–¢—É—Ä –≤ –î–∞–≥–µ—Å—Ç–∞–Ω</b> –î–∞—Ç—ã: ...",
        "url": "https://zefirtravel.by/offers/tur-v-dagestan-serdtse-kavkaza/"
    },
    "piter": {
        "name": "–ü–∏—Ç–µ—Ä",
        "desc": "<b>–¢—É—Ä –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</b> <b>–î–∞—Ç—ã:</b> ...",
        "url": "https://zefirtravel.by/offers/tur-v-sankt-peterburg-kareliya/"
    },
    "teriberka": {
        "name": "–¢–µ—Ä–∏–±–µ—Ä–∫–∞",
        "desc": "<b>–¢—É—Ä –≤ –¢–µ—Ä–∏–±–µ—Ä–∫—É!</b> <b>–î–∞—Ç—ã:</b> ...",
        "url": "https://zefirtravel.by/offers/teriberka-aysfloating-i-mogushchestvennye-kity/"
    },
    "belarus": {
        "name": "–ë–µ–ª–∞—Ä—É—Å—å",
        "desc": "<b>–ó–∞–ø–∞–¥–Ω—ã–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –ë–µ–ª–∞—Ä—É—Å–∏: –ö–æ—Å—Å–æ–≤–æ –∏ –†—É–∂–∞–Ω—ã</b> –î–∞—Ç—ã: ...",
        "url": "https://zefirtravel.by/offers/zapadnye-sokrovishcha-belarusi-kossovo-i-ruzhany/"
    },
}

# --- –ê–≤–∏–∞ —Ç—É—Ä—ã ---
AVIA_TOUR_LINK = "https://tours.example.com"

app = Flask('')

@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zefir Travel!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üöå –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã", callback_data="bus_tours")],
            [InlineKeyboardButton("‚úàÔ∏è –ê–≤–∏–∞ —Ç—É—Ä—ã", callback_data="avia_tours")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")]
        ])
    )

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # --- –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã ---
    if query.data == "bus_tours":
        buttons = [
            [InlineKeyboardButton(f"üåç {BUS_TOURS[key]['name']}", callback_data=f"tour_{key}")]
            for key in BUS_TOURS
        ]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        await query.edit_message_text(
            "üöå –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    # --- –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–±—É—Å–Ω–æ–≥–æ —Ç—É—Ä–∞ ---
    elif query.data.startswith("tour_"):
        tour_key = query.data.replace("tour_", "")
        if tour_key in BUS_TOURS:
            tour = BUS_TOURS[tour_key]
            manager_phone = MANAGER_CONTACTS.get(tour_key, MANAGER_CONTACTS["default"])
            await query.edit_message_text(
                f"{tour['desc']}\n\nüì± –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_phone}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ / –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—É—Ä–∞", url=tour['url'])],
                    [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"request_{tour_key}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="bus_tours")]
                ]),
                parse_mode="HTML"
            )

    # --- –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç—É—Ä ---
    elif query.data.startswith("request_"):
        direction = query.data.replace("request_", "")
        tour_name = BUS_TOURS.get(direction, {}).get("name", direction)
        back_btn = "bus_tours"
        user = query.from_user
        msg = await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=f"{REQUEST_TRIGGER} –¢—É—Ä: {tour_name}\n–ò–º—è: {user.first_name} @{user.username or ''}"
        )
        async def delete_request_msg(bot, chat_id, message_id):
            await asyncio.sleep(3)
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception:
                pass
        asyncio.create_task(delete_request_msg(context.bot, query.message.chat.id, msg.message_id))
        now_hour = datetime.now().hour
        if 21 <= now_hour or now_hour < 10:
            resp = "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
        else:
            resp = "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
        await query.edit_message_text(
            resp,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_btn)]])
        )

    # --- –ê–≤–∏–∞ —Ç—É—Ä—ã ---
    elif query.data == "avia_tours":
        manager_phone = MANAGER_CONTACTS.get("avia", MANAGER_CONTACTS["default"])
        await query.edit_message_text(
            "‚úàÔ∏è –ê–≤–∏–∞ —Ç—É—Ä—ã:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_phone}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞", url=AVIA_TOUR_LINK)],
                [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (–ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º)", callback_data="avia_request")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]),
            parse_mode="HTML"
        )

    elif query.data == "avia_request":
        user = query.from_user
        msg = await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=f"{REQUEST_TRIGGER} –ê–≤–∏–∞ —Ç—É—Ä\n–ò–º—è: {user.first_name} @{user.username or ''}"
        )
        async def delete_request_msg(bot, chat_id, message_id):
            await asyncio.sleep(3)
            try:
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception:
                pass
        asyncio.create_task(delete_request_msg(context.bot, query.message.chat.id, msg.message_id))
        now_hour = datetime.now().hour
        if 21 <= now_hour or now_hour < 10:
            resp = "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
        else:
            resp = "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
        await query.edit_message_text(
            resp,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="avia_tours")]])
        )

    # --- –ö–æ–Ω—Ç–∞–∫—Ç—ã ---
    elif query.data == "contact":
        manager_phone = MANAGER_CONTACTS.get("default")
        await query.edit_message_text(
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            f"üì± –û–±—â–∏–π –Ω–æ–º–µ—Ä: {manager_phone}\n"
            "üè¢ –ê–¥—Ä–µ—Å: –≥. –ú–∏–Ω—Å–∫, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1\n"
            "üïì –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ø–Ω-–ø—Ç 10:00‚Äì19:00, —Å–± 11:00‚Äì16:00, –≤—Å ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]),
            parse_mode="HTML"
        )

    # --- –ù–∞–∑–∞–¥ ---
    elif query.data == "back_to_menu":
        await query.edit_message_text(
            f"–ü—Ä–∏–≤–µ—Ç, {query.from_user.first_name}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zefir Travel!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üöå –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã", callback_data="bus_tours")],
                [InlineKeyboardButton("‚úàÔ∏è –ê–≤–∏–∞ —Ç—É—Ä—ã", callback_data="avia_tours")],
                [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")]
            ])
        )

async def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_button))
    keep_alive()
    await application.run_polling()

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
