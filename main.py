import asyncio
import os
import json
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass
from flask import Flask, request
from threading import Thread
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from datetime import datetime
import concurrent.futures
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class TourInfo:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ"""
    name: str
    description: str
    url: str
    manager_contact: Optional[str] = None

@dataclass
class BotConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    bot_token: str
    request_trigger: str
    default_manager_contact: str
    avia_tour_link: str
    working_hours: Dict[str, int]
    company_info: Dict[str, str]
    webhook_url: Optional[str] = None

class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    @staticmethod
    def load_config() -> BotConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                config_data = json.load(f)
        except FileNotFoundError:
            logger.warning("config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            config_data = {}
        
        return BotConfig(
            bot_token=os.getenv("BOT_TOKEN", config_data.get("bot_token", "")),
            request_trigger=config_data.get("request_trigger", "#–ó–ê–Ø–í–ö–ê"),
            default_manager_contact=config_data.get("default_manager_contact", "+375290000000"),
            avia_tour_link=config_data.get("avia_tour_link", "https://tours.example.com"),
            working_hours=config_data.get("working_hours", {"start": 10, "end": 21}),
            company_info=config_data.get("company_info", {
                "address": "–≥. –ú–∏–Ω—Å–∫, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1",
                "schedule": "–ø–Ω-–ø—Ç 10:00‚Äì19:00, —Å–± 11:00‚Äì16:00, –≤—Å ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏"
            }),
            webhook_url=os.getenv("WEBHOOK_URL", config_data.get("webhook_url"))
        )
    
    @staticmethod
    def load_tours() -> Dict[str, TourInfo]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('tours.json', 'r', encoding='utf-8') as f:
                tours_data = json.load(f)
            
            tours = {}
            for key, data in tours_data.items():
                tours[key] = TourInfo(
                    name=data["name"],
                    description=data["description"],
                    url=data["url"],
                    manager_contact=data.get("manager_contact")
                )
            return tours
        except FileNotFoundError:
            logger.error("tours.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å —Ç—É—Ä–∞–º–∏.")
            return {}

class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def welcome_message(user_name: str) -> str:
        return f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Zefir Travel!\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
    
    @staticmethod
    def request_sent_message(is_working_hours: bool) -> str:
        if is_working_hours:
            return "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
        return "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
    
    @staticmethod
    def avia_request_sent_message(is_working_hours: bool) -> str:
        if is_working_hours:
            return "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."
        return "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–í —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä."

class TravelBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞"""
    
    def __init__(self):
        self.config = ConfigManager.load_config()
        self.tours = ConfigManager.load_tours()
        self.app = Flask('')
        self.application = None
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)
        
    def setup_flask(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        @self.app.route('/')
        def home():
            return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        @self.app.route('/webhook', methods=['POST'])
        def webhook():
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram"""
            try:
                json_data = request.get_json()
                if json_data and self.application:
                    update = Update.de_json(json_data, self.application.bot)
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    self.executor.submit(self._process_update_sync, update)
                return "OK", 200
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
                return "Error", 500
    
    def _process_update_sync(self, update):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self.application.process_update(update))
            loop.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def keep_alive(self):
        """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def run():
            import logging
            log = logging.getLogger('werkzeug')
            log.setLevel(logging.ERROR)  # –°–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Flask
            self.app.run(host='0.0.0.0', port=8080)
        
        t = Thread(target=run)
        t.daemon = True
        t.start()
    
    def is_working_hours(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–±–æ—á–µ–µ –ª–∏ –≤—Ä–µ–º—è (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)"""
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_hour = datetime.now(moscow_tz).hour
        start_hour = self.config.working_hours["start"]
        end_hour = self.config.working_hours["end"]
        return start_hour <= current_hour < end_hour
    
    def get_main_menu_keyboard(self) -> InlineKeyboardMarkup:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üöå –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã", callback_data="bus_tours")],
            [InlineKeyboardButton("‚úàÔ∏è –ê–≤–∏–∞ —Ç—É—Ä—ã", callback_data="avia_tours")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contact")]
        ])
    
    async def send_request_message(self, context: ContextTypes.DEFAULT_TYPE, 
                                 chat_id: int, tour_name: str, user_info: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã"""
        msg = await context.bot.send_message(
            chat_id=chat_id,
            text=f"{self.config.request_trigger} –¢—É—Ä: {tour_name}\n{user_info}"
        )
        
        async def delete_message():
            await asyncio.sleep(3)
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg.message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        asyncio.create_task(delete_message())
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await update.message.reply_text(
            MessageTemplates.welcome_message(user.first_name),
            reply_markup=self.get_main_menu_keyboard()
        )
    
    async def handle_bus_tours(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–±—É—Å–Ω—ã—Ö —Ç—É—Ä–æ–≤"""
        buttons = [
            [InlineKeyboardButton(f"{tour.name}", callback_data=f"tour_{key}")]
            for key, tour in self.tours.items()
        ]
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        await query.edit_message_text(
            "üöå –ê–≤—Ç–æ–±—É—Å–Ω—ã–µ —Ç—É—Ä—ã:\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    
    async def handle_specific_tour(self, query, context, tour_key: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞"""
        if tour_key not in self.tours:
            await query.edit_message_text("–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        tour = self.tours[tour_key]
        manager_phone = tour.manager_contact or self.config.default_manager_contact
        
        await query.edit_message_text(
            f"{tour.description}\n\nüì± –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_phone}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ / –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—É—Ä–∞", url=tour.url)],
                [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"request_{tour_key}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="bus_tours")]
            ]),
            parse_mode="HTML"
        )
    
    async def handle_tour_request(self, query, context, tour_key: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä"""
        tour = self.tours.get(tour_key)
        if not tour:
            await query.edit_message_text("–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        user = query.from_user
        user_info = f"–ò–º—è: {user.first_name} @{user.username or ''}"
        
        await self.send_request_message(
            context, query.message.chat.id, tour.name, user_info
        )
        
        response_text = MessageTemplates.request_sent_message(self.is_working_hours())
        await query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="bus_tours")]
            ])
        )
    
    async def handle_avia_tours(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∏–∞ —Ç—É—Ä–æ–≤"""
        await query.edit_message_text(
            f"‚úàÔ∏è –ê–≤–∏–∞ —Ç—É—Ä—ã:\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {self.config.default_manager_contact}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞", url=self.config.avia_tour_link)],
                [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É (–ø–æ–¥–±–æ—Ä —Ç—É—Ä–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º)", callback_data="avia_request")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]),
            parse_mode="HTML"
        )
    
    async def handle_avia_request(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–≤–∏–∞ —Ç—É—Ä"""
        user = query.from_user
        user_info = f"–ò–º—è: {user.first_name} @{user.username or ''}"
        
        await self.send_request_message(
            context, query.message.chat.id, "–ê–≤–∏–∞ —Ç—É—Ä", user_info
        )
        
        response_text = MessageTemplates.avia_request_sent_message(self.is_working_hours())
        await query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="avia_tours")]
            ])
        )
    
    async def handle_contacts(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        await query.edit_message_text(
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n"
            f"üì± –û–±—â–∏–π –Ω–æ–º–µ—Ä: {self.config.default_manager_contact}\n"
            f"üè¢ –ê–¥—Ä–µ—Å: {self.config.company_info['address']}\n"
            f"üïì –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self.config.company_info['schedule']}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]),
            parse_mode="HTML"
        )
    
    async def handle_back_to_menu(self, query, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            MessageTemplates.welcome_message(query.from_user.first_name),
            reply_markup=self.get_main_menu_keyboard()
        )
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        try:
            if query.data == "bus_tours":
                await self.handle_bus_tours(query, context)
            elif query.data.startswith("tour_"):
                tour_key = query.data.replace("tour_", "")
                await self.handle_specific_tour(query, context, tour_key)
            elif query.data.startswith("request_"):
                tour_key = query.data.replace("request_", "")
                await self.handle_tour_request(query, context, tour_key)
            elif query.data == "avia_tours":
                await self.handle_avia_tours(query, context)
            elif query.data == "avia_request":
                await self.handle_avia_request(query, context)
            elif query.data == "contact":
                await self.handle_contacts(query, context)
            elif query.data == "back_to_menu":
                await self.handle_back_to_menu(query, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.config.bot_token:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        self.application = ApplicationBuilder().token(self.config.bot_token).build()
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        webhook_url = self.config.webhook_url
        if webhook_url:
            await self.application.bot.set_webhook(url=f"{webhook_url}/webhook")
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}/webhook")
        else:
            # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await self.application.bot.delete_webhook()
            logger.info("Webhook —É–¥–∞–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
        
        self.setup_flask()
        self.keep_alive()
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å webhook URL, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Flask, –∏–Ω–∞—á–µ polling
        if webhook_url:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
            await self.application.initialize()
            await self.application.start()
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(1)
        else:
            await self.application.run_polling()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TravelBot()
    await bot.run()

if __name__ == '__main__':
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
